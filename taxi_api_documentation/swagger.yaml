openapi: 3.0.0
info:
  title: Taxi Reservation API
  version: v1
  description: Taxi Reservation
servers:
  - url: http://uat-api.taxi-reserve-aot.com
    description: UAT environment Server
  - url: http://api.taxi-reserve-aot.com
    description: Production environment Server
tags:
  - name: Users
  - name: Queue Information
  - name: Bookings
  - name: Webhook Reception 
paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email Address
                  example: 'sample@gmail.com'
                password:
                  type: string
                  description: Password
                  example: '123456'
                firstname:
                  type: string
                  description: Firstname of the user
                  example: 'John'
                lastname:
                  type: string
                  description: Lastname of the user
                  example: 'Doe'
              required:
                - email
                - password
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: User's unique identifier
                    example: 1
                  email:
                    type: string
                    description: User's email address
                    example: 'sample@gmail.com'
        '400':
          description: Email duplicate error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'error message'
                    example: 'email duplicate'
  /users/login:
    post:
      tags:
        - Users
      summary: Log in of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address
                  example: sample@gmail.com
                password:
                  type: string
                  description: User's password
                  example: 123456
      parameters:
        - in: header
          name: device_token
          schema:
            type: string
          required: true
          description: Device token for the user's device
          example: xxx
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token
                  email:
                    type: string
                    description: User's email address
                  expired_time:
                    type: integer
                    description: Token expiration time in seconds
                    example: 3600
        '400':
          description: Error login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: email or password wrong

  /users/profile:
    get:
      summary: Get user profile information
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful retrieval of user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: User's email address
                    example: ""
                  avatar:
                    type: string
                    description: URL of the user's avatar image
                    example: ""
                  firstname: 
                    type: string
                    description: Firstname of the user
                  lastname: 
                    type: string
                    description: Lastname of the user
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating unauthorized access
                    example: "Authentication required"
  /users/notifications:
    get:
      tags:
        - Users
      summary: Get user notifications
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination (optional, default is 1)
      responses:
        '200':
          description: Successful retrieval of user notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Unique identifier for the notification
                      example: 1
                    type:
                      type: string
                      description: Type of notification
                      enum:
                        - taxi_arrival
                        - booking confirmation
                        - cancel confirmation
                      example: taxi_arrival
                    booking_id:
                      type: integer
                      description: ID of the associated booking (if applicable)
                      example: 1
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating unauthorized access
                    example: "Authentication required"

  /queue-information:
    get:
      tags:
        - Queue Information
      summary: Get information about the current booking queue
      responses:
        '200':
          description: Successful retrieval of queue information
          content:
            application/json:
              schema:
                type: object
                properties:
                  queue_number:
                    type: integer
                    description: The current position in the booking queue
                    example: 2
                  available_taxi:
                    type: array
                    description: A list of currently available taxis
                    items:
                      type: object
                      properties:
                        license_plate:
                          type: string
                          description: The license plate of the available taxi
                          example: กขค 123
                        driver:
                          type: object
                          description: Information about the available driver
                          properties:
                            firstname:
                              type: string
                              description: The first name of the driver
                              example: ""
                            lastname:
                              type: string
                              description: The last name of the driver
                              example: ""
                            image:
                              type: string
                              description: URL of the driver's image
                              example: ""

  /bookings:
    get:
      tags:
        - Bookings
      summary: Get a list of user's bookings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful retrieval of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The ID of the booking
                      example: 1
                    status:
                      type: string
                      description: The current status of the booking ('on_queue', 'cancel', 'complete')
                      example: on_queue
                    queue_number:
                      type: integer
                      description: Number of queue 
                      example: 2
                    booking_time:
                      type: string
                      format: date-time
                      description: The scheduled booking time
                      example: '2025-04-27 20:00:00'
                    taxi:
                      type: object
                      description: Information about the assigned taxi, or null if not yet assigned
                      nullable: true
                      properties:
                        license_plate:
                          type: string
                          description: The license plate of the assigned taxi
                          example: กข 123
                        driver:
                          type: object
                          description: Information about the assigned driver
                          properties:
                            firstname:
                              type: string
                              description: The first name of the driver
                              example: "john"
                            lastname:
                              type: string
                              description: The last name of the driver
                              example: "doe"
                            image:
                              type: string
                              description: URL of the driver's image
                              example: "/picture/driver/1.jpg"
                    created_at:
                      type: string
                      format: date-time
                      description: The timestamp when the booking was created
                      example: '2025-04-27 20:00:00'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating unauthorized access
                    example: "Authentication required"

    post:
      tags:
        - Bookings
      summary: Create a new taxi booking
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful for new booking
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the newly created booking
                    example: 1
                  booking_time:
                    type: string
                    description: The time of booking
                    example: "2025-04-15 20:00:00"
                  status:
                    type: string
                    description: The current status of the booking 
                    example: on_queue
                  taxi:
                      type: object
                      description: Information about the assigned taxi, or null if not yet assigned
                      nullable: true
                      properties:
                        license_plate:
                          type: string
                          description: The license plate of the assigned taxi
                          example: กข 123
                        driver:
                          type: object
                          description: Information about the assigned driver
                          properties:
                            firstname:
                              type: string
                              description: The first name of the driver
                              example: "john"
                            lastname:
                              type: string
                              description: The last name of the driver
                              example: "doe"
                            image:
                              type: string
                              description: URL of the driver's image
                              example: "/picture/driver/1.jpg"
        '400':
          description: Double instance booking error 
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: cannot booking instance double 
                    example: "cannot booking instance double"
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating unauthorized access
                    example: "Authentication required"

  /bookings/advance:
    post:
      tags:
        - Bookings
      summary: Create an advanced taxi booking with a specific time for future
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                time:
                  type: string
                  description: The desired booking time as a Unix timestamp (seconds since epoch)
                  required: true
                  example: '2025-04-28 20:00:00'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful creation of an advanced booking
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the newly created advanced booking
                    example: 1
                  status:
                    type: string
                    description: The current status of the booking
                    example: on_queue
                  booking_time:
                    type: string
                    description: The scheduled booking time in 'YYYY-MM-DD HH:MM:SS' format
                    example: '2025-04-27 20:00:00'
                  taxi:
                    type: object
                    description: Information about the assigned taxi, or null if not yet assigned
                    nullable: true
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating unauthorized access
                    example: "Authentication required"

  /bookings/{booking_id}:
    patch:
      tags:
        - Bookings
      summary: Cancel a taxi booking
      parameters:
        - in: path
          name: booking_id
          required: true
          schema:
            type: integer
          description: The ID of the booking to cancel
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful cancellation of the booking
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the cancelled booking
                    example: 1
                  status:
                    type: string
                    description: The status of the booking after cancellation
                    example: cancel
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating unauthorized access
                    example: "Authentication required"
  /bookings/histories:
    get:
      tags:
        - Bookings
      summary: Get a list of past bookings
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Optional page number for pagination
      responses:
        '200':
          description: Successful retrieval of booking history
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The ID of the booking
                      example: 1
                    status:
                      type: string
                      description: The status of the booking (e.g., 'complete', 'cancel')
                      example: complete
                    booking_time:
                      type: string
                      format: date-time
                      description: The scheduled booking time
                      example: '2025-04-27 20:00:00'
                    taxi:
                      type: object
                      description: Information about the assigned taxi, or null if not yet assigned
                      nullable: true
                      properties:
                        license_plate:
                          type: string
                          description: The license plate of the assigned taxi
                          example: กขค 123
                        driver:
                          type: object
                          description: Information about the assigned driver
                          properties:
                            firstname:
                              type: string
                              description: The first name of the driver
                              example: ""
                            lastname:
                              type: string
                              description: The last name of the driver
                              example: ""
                            image:
                              type: string
                              description: URL of the driver's image
                              example: ""
                    created_at:
                      type: string
                      format: date-time
                      description: The timestamp when the booking was created
                      example: '2025-04-27 20:00:00'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating unauthorized access
                    example: "Authentication required"
  
  /taxi-parking:
    post:
      tags:
        - Webhook Reception
      summary: Webhook endpoint for receiving taxi parking events (departure or arrival)
      parameters:
        - in: header
          name: secret-key
          schema:
            type: string
          required: true
          description: Secret key for webhook authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: Unique identifier for the parking event
                  example: '1'
                license_plate:
                  type: string
                  description: License plate of the taxi
                  required: true
                  example: กขค 123
                type:
                  type: string
                  description: Type of parking event
                  enum:
                    - departure
                    - arrival
                  example: departure
                time:
                  type: string
                  format: date-time
                  description: Timestamp of the parking event in 'YYYY-MM-DD HH:MM:SS' format
                  example: '2025-04-27 10:00:00'
              required:
                - license_plate
      responses:
        '200':
          description: Successful reception of the parking event
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message
                    example: 'ok'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT